import os
import logging
import asyncio
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder, ContextTypes,
    MessageHandler, CommandHandler,
    filters
)
from duckduckgo_search import DDGS
from dotenv import load_dotenv
import speech_recognition as sr
from pydub import AudioSegment
import requests

load_dotenv()
TOKEN = os.getenv("TOKEN")
OWNER_ID = int(os.getenv("OWNER_ID", "123456789"))

logging.basicConfig(level=logging.INFO)

users_with_access = {}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞
def has_access(user_id):
    return users_with_access.get(user_id, False)

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–Ω–æ–ø–∫–∏ –æ–ø–ª–∞—Ç—ã
def get_payment_keyboard():
    keyboard = [
        [InlineKeyboardButton("üí≥ –û–ø–ª–∞—Ç–∏—Ç—å 400‚Ç∏ —á–µ—Ä–µ–∑ Kaspi", url="https://pay.kaspi.kz/pay/sav8emzy")],
        [InlineKeyboardButton("üîÅ –Ø –æ–ø–ª–∞—Ç–∏–ª", callback_data="check_payment")]
    ]
    return InlineKeyboardMarkup(keyboard)

# –ö–æ–º–∞–Ω–¥–∞ —Å—Ç–∞—Ä—Ç–∞
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É –Ω–∞–π—Ç–∏ –∑–∞–≤–µ–¥–µ–Ω–∏–µ –ø–æ —Ç–≤–æ–µ–º—É –æ–ø–∏—Å–∞–Ω–∏—é.\n\n"
        "üí¨ –ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏, –∫—É–¥–∞ —Ö–æ—á–µ—à—å —Å—Ö–æ–¥–∏—Ç—å ‚Äî –Ω–∞–ø—Ä–∏–º–µ—Ä: ¬´–•–æ—á—É –±–∞—Ä —Å –∂–∏–≤–æ–π –º—É–∑—ã–∫–æ–π –∏ –∫–∞–ª—å—è–Ω–æ–º¬ª.\n\n"
        "üó£Ô∏è –ú–æ–∂–µ—à—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.\n"
        "üí≥ –ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø ‚Äî –æ–ø–ª–∞—Ç–∏ 400‚Ç∏ –∑–∞ 48 —á–∞—Å–æ–≤ –¥–æ—Å—Ç—É–ø–∞.",
        reply_markup=get_payment_keyboard()
    )

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–ø–ª–∞—Ç—ã (—Å –∑–∞–¥–µ—Ä–∂–∫–æ–π)
async def check_payment_delayed(user_id, context):
    await asyncio.sleep(60)  # –ñ–¥—ë–º 1 –º–∏–Ω—É—Ç—É
    users_with_access[user_id] = True
    try:
        await context.bot.send_message(
            chat_id=user_id,
            text="‚úÖ –°–ø–∞—Å–∏–±–æ! –î–æ—Å—Ç—É–ø –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –Ω–∞ 48 —á–∞—Å–æ–≤. –ú–æ–∂–µ—à—å –æ–ø–∏—Å—ã–≤–∞—Ç—å, –∫—É–¥–∞ —Ö–æ—á–µ—à—å –ø–æ–π—Ç–∏ üòä"
        )
    except:
        pass

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –∫–Ω–æ–ø–æ–∫
async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    user_id = query.from_user.id
    await query.answer()

    if query.data == "check_payment":
        await query.edit_message_text(
            "‚è≥ –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–ø–ª–∞—Ç—ã... –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ —Å—Ä–µ–¥—Å—Ç–≤–∞ –∏ –ø–æ–¥–æ–∂–¥–∏—Ç–µ. –î–æ—Å—Ç—É–ø –±—É–¥–µ—Ç –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω –≤ —Ç–µ—á–µ–Ω–∏–µ 1 –º–∏–Ω—É—Ç—ã."
        )
        asyncio.create_task(check_payment_delayed(user_id, context))

# –ü–æ–∏—Å–∫ –∑–∞–≤–µ–¥–µ–Ω–∏–π —á–µ—Ä–µ–∑ DuckDuckGo
def search_places(query: str):
    results = []
    with DDGS() as ddgs:
        for r in ddgs.text(query + " site:2gis.kz", max_results=3):
            results.append(r)
    return results

# –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
def get_images(query: str):
    images = []
    with DDGS() as ddgs:
        for img in ddgs.images(query, max_results=2):
            images.append(img["image"])
    return images

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
async def handle_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id

    if not has_access(user_id):
        await update.message.reply_text("üö´ –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–ª–∞—Ç–∏—Ç–µ, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å.", reply_markup=get_payment_keyboard())
        return

    query = update.message.text
    await update.message.reply_text("üîç –ò—â—É –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –º–µ—Å—Ç–∞...")

    places = search_places(query)
    images = get_images(query)

    if not places:
        await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∑–∞–≤–µ–¥–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –∑–∞–ø—Ä–æ—Å.")
        return

    for i, place in enumerate(places):
        text = f"üìç *{place['title']}*\n{place['body']}\nüîó [–û—Ç–∫—Ä—ã—Ç—å]({place['href']})"
        img_url = images[i] if i < len(images) else None
        if img_url:
            await update.message.reply_photo(photo=img_url, caption=text, parse_mode="Markdown")
        else:
            await update.message.reply_text(text, parse_mode="Markdown")

# –†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
async def handle_voice(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id

    if not has_access(user_id):
        await update.message.reply_text("üö´ –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–ª–∞—Ç–∏—Ç–µ, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å.", reply_markup=get_payment_keyboard())
        return

    voice = await update.message.voice.get_file()
    ogg_path = f"voice_{user_id}.ogg"
    wav_path = f"voice_{user_id}.wav"
    await voice.download_to_drive(ogg_path)

    sound = AudioSegment.from_ogg(ogg_path)
    sound.export(wav_path, format="wav")

    recognizer = sr.Recognizer()
    with sr.AudioFile(wav_path) as source:
        audio = recognizer.record(source)

    try:
        text = recognizer.recognize_google(audio, language="ru-RU")
        await update.message.reply_text(f"üó£ –í—ã —Å–∫–∞–∑–∞–ª–∏: {text}")
        await handle_text(update, context)
    except:
        await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ä–µ—á—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == "__main__":
    app = ApplicationBuilder().token(TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text))
    app.add_handler(MessageHandler(filters.VOICE, handle_voice))
    app.add_handler(MessageHandler(filters.ALL, lambda u, c: None))
    app.add_handler(MessageHandler(filters.StatusUpdate.NEW_CHAT_MEMBERS, lambda u, c: None))
    app.add_handler(MessageHandler(filters.StatusUpdate.LEFT_CHAT_MEMBER, lambda u, c: None))
    app.add_handler(MessageHandler(filters.StatusUpdate.NEW_CHAT_TITLE, lambda u, c: None))
    app.add_handler(MessageHandler(filters.StatusUpdate.NEW_CHAT_PHOTO, lambda u, c: None))
    app.add_handler(MessageHandler(filters.StatusUpdate.DELETE_CHAT_PHOTO, lambda u, c: None))
    app.add_handler(MessageHandler(filters.StatusUpdate.GROUP_CHAT_CREATED, lambda u, c: None))
    app.add_handler(MessageHandler(filters.StatusUpdate.SUPERGROUP_CHAT_CREATED, lambda u, c: None))
    app.add_handler(MessageHandler(filters.StatusUpdate.CHANNEL_CHAT_CREATED, lambda u, c: None))
    app.add_handler(MessageHandler(filters.StatusUpdate.MIGRATE_TO_CHAT_ID, lambda u, c: None))
    app.add_handler(MessageHandler(filters.StatusUpdate.MIGRATE_FROM_CHAT_ID, lambda u, c: None))
    app.add_handler(MessageHandler(filters.StatusUpdate.PINNED_MESSAGE, lambda u, c: None))
    app.add_handler(MessageHandler(filters.StatusUpdate.MESSAGE_AUTO_DELETE_TIMER_CHANGED, lambda u, c: None))
    app.add_handler(MessageHandler(filters.StatusUpdate.UNKNOWN, lambda u, c: None))
    app.add_handler(MessageHandler(filters.UpdateType.UNKNOWN, lambda u, c: None))
    app.add_handler(MessageHandler(filters.UpdateType.CALLBACK_QUERY, button_handler))

    print("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    app.run_polling()
