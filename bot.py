# bot.py
import logging
import os
import io
import base64
from datetime import datetime, timedelta
from PIL import Image
from aiogram import Bot, Dispatcher, types, executor
from aiogram.types import InputFile
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
import asyncio

from recognizer import recognize_kaspi_receipt  # —Ç–≤–æ–π AI-–ø–∞—Ä—Å–µ—Ä —á–µ–∫–æ–≤

TOKEN = os.getenv("TOKEN")
OWNER_ID = int(os.getenv("OWNER_ID"))
KASPI_NAME = os.getenv("KASPI_NAME")

bot = Bot(token=TOKEN)
dp = Dispatcher(bot, storage=MemoryStorage())
logging.basicConfig(level=logging.INFO)

# –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –¥–æ—Å—Ç—É–ø—ã
user_access = {}

class States(StatesGroup):
    waiting_for_receipt = State()

@dp.message_handler(commands=['start'])
async def start(message: types.Message):
    await message.answer("üëã –ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É –Ω–∞–π—Ç–∏ –ª—É—á—à–∏–µ –∑–∞–≤–µ–¥–µ–Ω–∏—è –≤ —Ç–≤–æ–µ–º –≥–æ—Ä–æ–¥–µ.\n\nüí∏ –î–ª—è –¥–æ—Å—Ç—É–ø–∞ –æ—Ç–ø—Ä–∞–≤—å —á–µ–∫ Kaspi Pay –Ω–∞ –∏–º—è *{name}* —Å—É–º–º–æ–π 400‚Ç∏ –∏–ª–∏ –æ–ø–ª–∞—Ç–∏ —Ç—É—Ç:\nhttps://pay.kaspi.kz/pay/sav8emzy\n\n–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –ø—Ä–∏—à–ª–∏ —Ñ–æ—Ç–æ —á–µ–∫–∞ —Å—é–¥–∞.".format(name=KASPI_NAME), parse_mode="Markdown")

@dp.message_handler(commands=['check'])
async def check_access(message: types.Message):
    uid = message.from_user.id
    if uid in user_access and user_access[uid] > datetime.now():
        await message.answer("‚úÖ –î–æ—Å—Ç—É–ø –∞–∫—Ç–∏–≤–µ–Ω –¥–æ: {}".format(user_access[uid].strftime("%Y-%m-%d %H:%M")))
    else:
        await message.answer("üö´ –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞. –ü—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ Kaspi —á–µ–∫–∞ –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏.")

@dp.message_handler(commands=['receipt'])
async def request_receipt(message: types.Message):
    await message.answer("üì∑ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏—à–ª–∏ —Ñ–æ—Ç–æ Kaspi Pay —á–µ–∫–∞.")
    await States.waiting_for_receipt.set()

@dp.message_handler(content_types=types.ContentType.PHOTO, state=States.waiting_for_receipt)
async def handle_receipt_photo(message: types.Message, state: FSMContext):
    photo = message.photo[-1]
    photo_bytes = await photo.download(destination=io.BytesIO())
    photo_bytes.seek(0)

    # –†–∞—Å–ø–æ–∑–Ω–∞—Ç—å —á–µ–∫ —Å –ø–æ–º–æ—â—å—é AI
    try:
        result = recognize_kaspi_receipt(photo_bytes)
        full_name, amount, date = result['name'], result['amount'], result['date']

        if full_name == KASPI_NAME and amount >= 400:
            user_access[message.from_user.id] = datetime.now() + timedelta(hours=48)
            await message.answer("‚úÖ –£—Å–ø–µ—à–Ω–æ! –î–æ—Å—Ç—É–ø –∞–∫—Ç–∏–≤–µ–Ω –Ω–∞ 48 —á–∞—Å–æ–≤.")
        else:
            await message.answer("üö´ –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —á–µ–∫. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–º—è –∏ —Å—É–º–º—É –æ–ø–ª–∞—Ç—ã.")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–∏ —á–µ–∫–∞: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —á–µ–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

    await state.finish()

@dp.message_handler(lambda message: message.text.lower() in ["–≥–¥–µ –æ—Ç–¥–æ—Ö–Ω—É—Ç—å", "–Ω–∞–π–¥–∏ –∑–∞–≤–µ–¥–µ–Ω–∏–µ", "–∫—É–¥–∞ —Å—Ö–æ–¥–∏—Ç—å"])
async def recommend(message: types.Message):
    uid = message.from_user.id
    if uid not in user_access or user_access[uid] < datetime.now():
        await message.answer("üîí –°–Ω–∞—á–∞–ª–∞ –∞–∫—Ç–∏–≤–∏—Ä—É–π—Ç–µ –¥–æ—Å—Ç—É–ø. –ü—Ä–∏—à–ª–∏—Ç–µ —á–µ–∫ Kaspi Pay.")
        return

    await message.answer("üîç –ü–æ–¥–±–∏—Ä–∞—é –ª—É—á—à–∏–µ –º–µ—Å—Ç–∞ –ø–æ –æ—Ç–∑—ã–≤–∞–º, –∞—Ç–º–æ—Å—Ñ–µ—Ä–µ –∏ —Ñ–æ—Ç–æ... ‚è≥")
    
    # üí° –ó–¥–µ—Å—å –±—É–¥–µ—Ç —Ñ—É–Ω–∫—Ü–∏—è —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ –∑–∞–≤–µ–¥–µ–Ω–∏—è–º —á–µ—Ä–µ–∑ –æ—Ç–∫—Ä—ã—Ç—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, DuckDuckGo/2GIS –ø–∞—Ä—Å–∏–Ω–≥)
    await asyncio.sleep(2)

    await message.answer_photo(photo=open("static/bar_example.jpg", "rb"), caption="üìç *Bar Example*\n\nüé∂ –ú—É–∑—ã–∫–∞: Lounge\nüë• –ê—É–¥–∏—Ç–æ—Ä–∏—è: 25-35\nüçΩ –°—Ä–µ–¥–Ω–∏–π —á–µ–∫: 4500‚Ç∏\n‚≠êÔ∏è –û—Ç–∑—ã–≤—ã: 4.5/5\n\n[üìç –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –Ω–∞ –∫–∞—Ä—Ç–µ](https://go.2gis.com/x1234)", parse_mode="Markdown")

@dp.message_handler(commands=['help'])
async def help_command(message: types.Message):
    await message.answer("üìå –ö–æ–º–∞–Ω–¥—ã:\n/start ‚Äî –∑–∞–ø—É—Å—Ç–∏—Ç—å\n/receipt ‚Äî –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —á–µ–∫\n/check ‚Äî –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–æ—Å—Ç—É–ø\n/help ‚Äî –ø–æ–º–æ—â—å")


if __name__ == '__main__':
    from aiogram import executor
    executor.start_polling(dp, skip_updates=True)
