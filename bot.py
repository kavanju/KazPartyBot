import os import logging from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, filters, ContextTypes, CallbackQueryHandler from duckduckgo_search import DDGS from PIL import Image import pytesseract from io import BytesIO import speech_recognition as sr from pydub import AudioSegment import requests from dotenv import load_dotenv

load_dotenv()

TOKEN = os.getenv("TOKEN") OWNER_ID = int(os.getenv("OWNER_ID")) KASPI_NAME = os.getenv("KASPI_NAME")

logging.basicConfig( format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO )

–ü–æ–∏—Å–∫ –∑–∞–≤–µ–¥–µ–Ω–∏–π —á–µ—Ä–µ–∑ DuckDuckGo

async def search_places(query: str) -> str: results = [] with DDGS() as ddgs: for r in ddgs.text(query, region='kz-ru', safesearch='Off', max_results=5): results.append(f"üîπ <b>{r['title']}</b>\n{r['href']}\n{r['body']}") return "\n\n".join(results) if results else "üòï –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å."

–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE): await update.message.reply_text("üëã –ü—Ä–∏–≤–µ—Ç! –û—Ç–ø—Ä–∞–≤—å –≥–æ–ª–æ—Å–æ–º –∏–ª–∏ —Ç–µ–∫—Å—Ç–æ–º, –∫—É–¥–∞ —Ö–æ—á–µ—à—å —Å—Ö–æ–¥–∏—Ç—å ‚Äî —è –ø–æ–¥–±–µ—Ä—É –∑–∞–≤–µ–¥–µ–Ω–∏—è! –¢–∞–∫–∂–µ –º–æ–∂–µ—à—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ Kaspi-—á–µ–∫–∞ –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –¥–æ—Å—Ç—É–ø–∞.")

–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è

async def handle_text(update: Update, context: ContextTypes.DEFAULT_TYPE): query = update.message.text await update.message.reply_text("üîç –ò—â—É –∑–∞–≤–µ–¥–µ–Ω–∏—è...") results = await search_places(query) await update.message.reply_text(results, parse_mode="HTML")

–û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –≤–≤–æ–¥–∞

async def handle_voice(update: Update, context: ContextTypes.DEFAULT_TYPE): file = await update.message.voice.get_file() ogg_path = "voice.ogg" wav_path = "voice.wav" await file.download_to_drive(ogg_path)

# –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è ogg –≤ wav
sound = AudioSegment.from_ogg(ogg_path)
sound.export(wav_path, format="wav")

recognizer = sr.Recognizer()
with sr.AudioFile(wav_path) as source:
    audio = recognizer.record(source)
    try:
        text = recognizer.recognize_google(audio, language="ru-RU")
        await update.message.reply_text(f"üó£Ô∏è –í—ã —Å–∫–∞–∑–∞–ª–∏: {text}\nüîç –ò—â—É...")
        results = await search_places(text)
        await update.message.reply_text(results, parse_mode="HTML")
    except sr.UnknownValueError:
        await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ä–µ—á—å.")

–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ Kaspi —á–µ–∫–∞

async def handle_photo(update: Update, context: ContextTypes.DEFAULT_TYPE): file = await update.message.photo[-1].get_file() img_bytes = await file.download_as_bytearray() image = Image.open(BytesIO(img_bytes)) text = pytesseract.image_to_string(image, lang='rus')

if KASPI_NAME.lower() in text.lower() and ("400" in text or "‚Ç∏" in text):
    await update.message.reply_text("‚úÖ –û–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞. –î–æ—Å—Ç—É–ø –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –Ω–∞ 48 —á–∞—Å–æ–≤.")
else:
    await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —á–µ–∫. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤–∏–¥–Ω–æ –∏–º—è –∏ —Å—É–º–º—É 400‚Ç∏.")

–û—Å–Ω–æ–≤–Ω–æ–π –∑–∞–ø—É—Å–∫

if name == 'main': app = ApplicationBuilder().token(TOKEN).build()

app.add_handler(CommandHandler("start", start))
app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text))
app.add_handler(MessageHandler(filters.VOICE, handle_voice))
app.add_handler(MessageHandler(filters.PHOTO, handle_photo))

print("KazPartyBot –∑–∞–ø—É—â–µ–Ω...")
app.run_polling()

