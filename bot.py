import os
import logging
from telegram import Update, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    filters,
    ContextTypes,
    ConversationHandler,
)
from keep_alive import keep_alive
from dotenv import load_dotenv
import datetime

load_dotenv()

TOKEN = os.getenv("TOKEN")
OWNER_ID = int(os.getenv("OWNER_ID"))
KASPI_NAME = os.getenv("KASPI_NAME")
MOBILE_PAY_URL = os.getenv("MOBILE_PAY_URL")

logging.basicConfig(level=logging.INFO)

USERS = {}
FREE_TRIAL_USED = set()


def get_language_keyboard():
    return ReplyKeyboardMarkup(
        [
            ["üá∑üá∫ –†—É—Å—Å–∫–∏–π", "üá∞üáø “ö–∞–∑–∞“õ—à–∞", "üá¨üáß English"]
        ],
        resize_keyboard=True
    )


def get_main_menu(lang="üá∑üá∫ –†—É—Å—Å–∫–∏–π"):
    if "“ö" in lang:
        return ReplyKeyboardMarkup(
            [["–Ü–∑–¥–µ—É", "–°–∞“õ—Ç–∞–ª“ì–∞–Ω –æ—Ä—ã–Ω–¥–∞—Ä"]], resize_keyboard=True
        )
    elif "En" in lang or "üá¨üáß" in lang:
        return ReplyKeyboardMarkup(
            [["Search", "Saved places"]], resize_keyboard=True
        )
    else:
        return ReplyKeyboardMarkup(
            [["–ü–æ–∏—Å–∫", "–°–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ –º–µ—Å—Ç–∞"]], resize_keyboard=True
        )


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id

    await update.message.reply_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ / –¢—ñ–ª–¥—ñ —Ç–∞“£–¥–∞“£—ã–∑ / Choose language:",
        reply_markup=get_language_keyboard()
    )


async def handle_language(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    lang = update.message.text

    USERS[user_id] = {"lang": lang, "access_until": None, "saved": []}

    await update.message.reply_text(
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ù–∞–ø–∏—à–∏—Ç–µ, –∫—É–¥–∞ —Ö–æ—Ç–∏—Ç–µ —Å—Ö–æ–¥–∏—Ç—å (–Ω–∞–ø—Ä–∏–º–µ—Ä: —Ç–∏—Ö–∏–π –±–∞—Ä —Å –∂–∏–≤–æ–π –º—É–∑—ã–∫–æ–π –≤ –ë–µ—Ä–ª–∏–Ω–µ)." if "üá∑üá∫" in lang else
        "“ö–æ—à –∫–µ–ª–¥—ñ“£—ñ–∑! “ö–∞–π–¥–∞ –±–∞—Ä“ì—ã“£—ã–∑ –∫–µ–ª–µ—Ç—ñ–Ω—ñ–Ω –∂–∞–∑—ã“£—ã–∑ (–º—ã—Å–∞–ª—ã: –ê–ª–º–∞—Ç—ã–¥–∞ —Ç—ã–Ω—ã—à –∫–∞—Ñ–µ)." if "üá∞üáø" in lang else
        "Welcome! Tell me where you'd like to go (e.g., chill bar with live music in Berlin).",
        reply_markup=get_main_menu(lang)
    )


async def process_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    text = update.message.text

    if user_id not in USERS:
        await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –≤–≤–µ–¥–∏—Ç–µ /start.")
        return

    user = USERS[user_id]
    lang = user.get("lang", "üá∑üá∫")

    now = datetime.datetime.utcnow()
    access_until = user.get("access_until")

    if access_until and now < access_until:
        await update.message.reply_text("üîç –ò—â—É –∑–∞–≤–µ–¥–µ–Ω–∏—è –ø–æ –≤–∞—à–µ–º—É –æ–ø–∏—Å–∞–Ω–∏—é...")
        # –ó–¥–µ—Å—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ä–µ–∞–ª—å–Ω—ã–π –ò–ò-–ø–æ–∏—Å–∫ + –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ API
        await update.message.reply_text("‚úÖ –ü—Ä–∏–º–µ—Ä –Ω–∞–π–¥–µ–Ω–Ω–æ–≥–æ –º–µ—Å—Ç–∞: –ë–∞—Ä 'Berlin Lounge' ‚Äî —Å—Ä–µ–¥–Ω–∏–π —á–µ–∫ 15‚Ç¨, —Ä–∞–±–æ—Ç–∞–µ—Ç –¥–æ 2:00 –Ω–æ—á–∏.")
        user["saved"].append("Berlin Lounge")
    elif user_id not in FREE_TRIAL_USED:
        FREE_TRIAL_USED.add(user_id)
        await update.message.reply_text(
            "üéÅ –ü—Ä–æ–±–Ω—ã–π –∑–∞–ø—Ä–æ—Å –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!\n\nüîç –ò—â—É –∑–∞–≤–µ–¥–µ–Ω–∏—è..."
        )
        await update.message.reply_text("‚úÖ –ü—Ä–∏–º–µ—Ä –º–µ—Å—Ç–∞: –ö–ª—É–± 'Astana Night' ‚Äî –º—É–∑—ã–∫–∞ 90—Ö, –≤—Ö–æ–¥ —Å–≤–æ–±–æ–¥–Ω—ã–π.")
        user["saved"].append("Astana Night")
    else:
        await update.message.reply_text(
            f"üîí –í–∞—à –¥–æ—Å—Ç—É–ø –∑–∞–∫–æ–Ω—á–∏–ª—Å—è.\n\n–û–ø–ª–∞—Ç–∏—Ç–µ 400‚Ç∏ (48—á): {MOBILE_PAY_URL}\n\n"
            "–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –ø—Ä–∏—à–ª–∏—Ç–µ —á–µ–∫ (—Ñ–æ—Ç–æ)."
        )


async def handle_photo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    photo = update.message.photo[-1]
    file = await photo.get_file()
    file_path = f"check_{user_id}.jpg"
    await file.download_to_drive(file_path)

    # –ò–º–∏—Ç–∞—Ü–∏—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —á–µ–∫–∞
    fake_kaspi_name = KASPI_NAME
    fake_amount = "400"

    # –°–∏–º—É–ª–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É
    now = datetime.datetime.utcnow()
    USERS[user_id]["access_until"] = now + datetime.timedelta(hours=48)

    await update.message.reply_text("‚úÖ –û–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞! –î–æ—Å—Ç—É–ø –Ω–∞ 48 —á–∞—Å–æ–≤ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω.")


async def show_saved_places(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    saved = USERS.get(user_id, {}).get("saved", [])
    if not saved:
        await update.message.reply_text("üìÇ –ù–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö –º–µ—Å—Ç.")
    else:
        await update.message.reply_text("üìå –°–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ –º–µ—Å—Ç–∞:\n" + "\n".join(saved))


def main():
    keep_alive()

    app = ApplicationBuilder().token(TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.PHOTO, handle_photo))
    app.add_handler(MessageHandler(filters.Regex("^(–ü–æ–∏—Å–∫|–Ü–∑–¥–µ—É|Search)$"), process_message))
    app.add_handler(MessageHandler(filters.Regex("^(–°–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ –º–µ—Å—Ç–∞|–°–∞“õ—Ç–∞–ª“ì–∞–Ω –æ—Ä—ã–Ω–¥–∞—Ä|Saved places)$"), show_saved_places))
    app.add_handler(MessageHandler(filters.TEXT & (~filters.COMMAND), handle_language))

    app.run_polling()


if __name__ == "__main__":
    main()
