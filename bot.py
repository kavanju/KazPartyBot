import os import logging import pytesseract import datetime import io import re from PIL import Image from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, InputFile from telegram.ext import (ApplicationBuilder, CommandHandler, MessageHandler, filters, ContextTypes, CallbackQueryHandler) from flask import Flask from threading import Thread from dotenv import load_dotenv from collections import defaultdict from pydub import AudioSegment import speech_recognition as sr import requests

load_dotenv()

TOKEN = os.getenv("TOKEN") OWNER_ID = int(os.getenv("OWNER_ID", "123456789")) KASPI_NAME = os.getenv("KASPI_NAME", "–ò–º—è Kaspi")

user_access = {} free_trial_used = set() saved_places = defaultdict(list)

logging.basicConfig(level=logging.INFO) logger = logging.getLogger(name)

flask_app = Flask(name)

@flask_app.route("/") def home(): return "KazPartyBot is alive!"

def run_flask(): flask_app.run(host="0.0.0.0", port=8080)

–ö–Ω–æ–ø–∫–∏ –º–µ–Ω—é

main_keyboard = InlineKeyboardMarkup([ [InlineKeyboardButton("üìö –ú–æ–∏ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ –º–µ—Å—Ç–∞", callback_data="saved")] ])

–ö–æ–º–∞–Ω–¥—ã

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE): user_id = update.effective_user.id if user_id == OWNER_ID: user_access[user_id] = True await update.message.reply_text("üëë –ü—Ä–∏–≤–µ—Ç, –∞–¥–º–∏–Ω! –î–æ—Å—Ç—É–ø –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –Ω–∞–≤—Å–µ–≥–¥–∞.", reply_markup=main_keyboard) return

if user_access.get(user_id):
    await update.message.reply_text("‚úÖ –£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –¥–æ—Å—Ç—É–ø.", reply_markup=main_keyboard)
elif user_id not in free_trial_used:
    free_trial_used.add(user_id)
    user_access[user_id] = True
    await update.message.reply_text("üéÅ –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π –¥–æ—Å—Ç—É–ø –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω! –ù–∞–ø–∏—à–∏—Ç–µ –∑–∞–ø—Ä–æ—Å.", reply_markup=main_keyboard)
else:
    await update.message.reply_text(
        "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.\n\nüí∏ –û–ø–ª–∞—Ç–∞ –∑–∞ 48 —á–∞—Å–æ–≤:\n"
        "‚Ä¢ 400‚Ç∏ Kaspi Pay\n‚Ä¢ $2 PayPal\n\n"
        "üìé Kaspi: https://pay.kaspi.kz/pay/sav8emzy\n"
        "–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –ø—Ä–∏—à–ª–∏—Ç–µ —á–µ–∫ —Å—é–¥–∞."
    )

–†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ —Å —á–µ–∫–∞

async def photo_handler(update: Update, context: ContextTypes.DEFAULT_TYPE): user_id = update.effective_user.id photo = await update.message.photo[-1].get_file() image_bytes = await photo.download_as_bytearray() image = Image.open(io.BytesIO(image_bytes)) text = pytesseract.image_to_string(image, lang='rus+eng') logger.info(f"–ß–µ–∫ –æ—Ç {user_id}: {text}")

today = datetime.datetime.now().strftime("%d.%m.%Y")
if KASPI_NAME in text and "400" in text and today in text:
    user_access[user_id] = True
    await update.message.reply_text("‚úÖ –î–æ—Å—Ç—É–ø –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω. –ü–∏—à–∏—Ç–µ, —á—Ç–æ –∏—â–µ–º!", reply_markup=main_keyboard)
else:
    await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —á–µ–∫. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤–∏–¥–Ω–æ –∏–º—è, —Å—É–º–º—É 400‚Ç∏ –∏ —Å–µ–≥–æ–¥–Ω—è—à–Ω—é—é –¥–∞—Ç—É.")

–ì–æ–ª–æ—Å–æ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã

async def voice_handler(update: Update, context: ContextTypes.DEFAULT_TYPE): user_id = update.effective_user.id if not user_access.get(user_id) and user_id != OWNER_ID: await update.message.reply_text("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞. –ù–∞–∂–º–∏—Ç–µ /start") return

voice = await update.message.voice.get_file()
ogg_data = await voice.download_as_bytearray()
ogg_audio = io.BytesIO(ogg_data)
ogg_audio.name = 'input.ogg'

audio = AudioSegment.from_file(ogg_audio)
wav_io = io.BytesIO()
audio.export(wav_io, format="wav")
wav_io.seek(0)

recognizer = sr.Recognizer()
with sr.AudioFile(wav_io) as source:
    audio_data = recognizer.record(source)
    try:
        text = recognizer.recognize_google(audio_data, language="ru-RU")
        await update.message.reply_text(f"üé§ –í—ã —Å–∫–∞–∑–∞–ª–∏: {text}")
        await process_search(text, update, context)
    except sr.UnknownValueError:
        await update.message.reply_text("üòï –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ä–µ—á—å.")

–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ –∏ –≥–æ–ª–æ—Å–æ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤

async def handle_text(update: Update, context: ContextTypes.DEFAULT_TYPE): user_id = update.effective_user.id if not user_access.get(user_id) and user_id != OWNER_ID: await update.message.reply_text("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞. –ù–∞–∂–º–∏—Ç–µ /start") return

query = update.message.text
await process_search(query, update, context)

–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ –º–µ–Ω—é

async def handle_buttons(update: Update, context: ContextTypes.DEFAULT_TYPE): query = update.callback_query user_id = query.from_user.id await query.answer() if query.data == "saved": places = saved_places.get(user_id, []) if not places: await query.edit_message_text("üì≠ –£ –≤–∞—Å –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö –º–µ—Å—Ç.") return msg = "üìö –í–∞—à–∏ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ –º–µ—Å—Ç–∞:\n\n" + "\n\n".join(places) await query.edit_message_text(msg[:4000])

# –ü–æ–∏—Å–∫ –∑–∞–≤–µ–¥–µ–Ω–∏–π —á–µ—Ä–µ–∑ DuckDuckGo/TripAdvisor/2GIS

async def process_search(query: str, update: Update, context: ContextTypes.DEFAULT_TYPE): user_id = update.effective_user.id await update.message.reply_text(f"ü§ñ –ò—â—É –ø–æ –∑–∞–ø—Ä–æ—Å—É: ¬´{query}¬ª...")

try:
    url = f"https://duckduckgo.com/html/?q=site:2gis.kz+{query.replace(' ', '+')}"
    r = requests.get(url, headers={"User-Agent": "Mozilla/5.0"})
    results = re.findall(r'<a rel="nofollow" class="result__a" href="(.*?)">(.*?)</a>', r.text)

    if not results:
        await update.message.reply_text("üòï –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —É—Ç–æ—á–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å.")
        return

    messages = []
    for link, title in results[:3]:
        place_text = f"üèôÔ∏è <b>{title}</b>\nüîó <a href='{link}'>{link}</a>"
        messages.append(place_text)
        saved_places[user_id].append(f"{title} - {link}")

    for msg in messages:
        await update.message.reply_text(msg, parse_mode='HTML')

except Exception as e:
    logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: {e}")
    await update.message.reply_text("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

def main(): Thread(target=run_flask).start()

app = ApplicationBuilder().token(TOKEN).build()

app.add_handler(CommandHandler("start", start))
app.add_handler(CallbackQueryHandler(handle_buttons))
app.add_handler(MessageHandler(filters.PHOTO, photo_handler))
app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text))
app.add_handler(MessageHandler(filters.VOICE, voice_handler))

app.run_polling()

if name == "main": main()


