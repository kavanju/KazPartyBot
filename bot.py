import os
import logging
import sqlite3
import requests
import asyncio
import pytesseract
import speech_recognition as sr
from PIL import Image
from flask import Flask
from threading import Thread
from telegram import (Update, KeyboardButton, ReplyKeyboardMarkup, InlineKeyboardButton, InlineKeyboardMarkup, InputFile)
from telegram.ext import (ApplicationBuilder, CommandHandler, MessageHandler, filters, ContextTypes, CallbackQueryHandler)
from duckduckgo_search import DDGS
from dotenv import load_dotenv

# Load env vars
load_dotenv()
TOKEN = os.getenv("TOKEN")
OWNER_ID = int(os.getenv("OWNER_ID", "123456789"))
KASPI_NAME = os.getenv("KASPI_NAME", "")
PAYPAL_LINK = os.getenv("PAYPAL_LINK", "")

# Logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# Flask –¥–ª—è —Ä–µ–Ω–¥–µ—Ä–∞
flask_app = Flask(__name__)
@flask_app.route('/')
def home():
    return 'Bot is running!'

def run_flask():
    flask_app.run(host='0.0.0.0', port=8080)

# DB init
conn = sqlite3.connect("data.db", check_same_thread=False)
c = conn.cursor()
c.execute('''CREATE TABLE IF NOT EXISTS users (id INTEGER PRIMARY KEY, access_until INTEGER)''')
c.execute('''CREATE TABLE IF NOT EXISTS places (user_id INTEGER, name TEXT, address TEXT, photo_url TEXT)''')
conn.commit()

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞
def has_access(user_id):
    c.execute("SELECT access_until FROM users WHERE id=?", (user_id,))
    row = c.fetchone()
    if row:
        return row[0] > int(asyncio.time.time())
    return False

# –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    kb = [[KeyboardButton("üé§ –ì–æ–ª–æ—Å–æ–º"), KeyboardButton("üì∏ –û—Ç–ø—Ä–∞–≤–∏—Ç—å —á–µ–∫")],
          [KeyboardButton("üìö –ú–æ–∏ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ –º–µ—Å—Ç–∞")]]
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É –Ω–∞–π—Ç–∏ –∑–∞–≤–µ–¥–µ–Ω–∏–µ. –û–ø–∏—à–∏, –∫—É–¥–∞ —Ö–æ—á–µ—à—å –ø–æ–π—Ç–∏:",
                                    reply_markup=ReplyKeyboardMarkup(kb, resize_keyboard=True))

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ –∑–∞–ø—Ä–æ—Å–∞
async def handle_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    if not has_access(user_id):
        await update.message.reply_text("üîí –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞. 1 –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –∑–∞–ø—Ä–æ—Å. –ü–æ—Ç–æ–º –æ–ø–ª–∞—Ç–∞ 400‚Ç∏/48—á. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —á–µ–∫ Kaspi –∏–ª–∏ –æ–ø–ª–∞—Ç–∏—Ç–µ: https://pay.kaspi.kz/pay/sav8emzy")
    query = update.message.text
    places = []
    with DDGS() as ddgs:
        for r in ddgs.text(query + " site:2gis.kz", max_results=3):
            places.append(r)
    for place in places:
        name = place['title']
        link = place['href']
        snippet = place['body']
        await update.message.reply_text(f"üèôÔ∏è {name}\nüìç {snippet}\nüîó {link}")
        c.execute("INSERT INTO places (user_id, name, address, photo_url) VALUES (?, ?, ?, ?)",
                  (user_id, name, snippet, link))
    conn.commit()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —á–µ–∫–æ–≤ (—Ñ–æ—Ç–æ)
async def handle_photo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    photo = await update.message.photo[-1].get_file()
    path = f"/tmp/{update.message.from_user.id}.jpg"
    await photo.download_to_drive(path)
    text = pytesseract.image_to_string(Image.open(path))
    if KASPI_NAME in text and ("400" in text or "200" in text):
        c.execute("REPLACE INTO users (id, access_until) VALUES (?, ?)", (update.message.from_user.id, int(asyncio.time.time()) + 172800))
        conn.commit()
        await update.message.reply_text("‚úÖ –î–æ—Å—Ç—É–ø –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –Ω–∞ 48 —á–∞—Å–æ–≤")
    else:
        await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –æ–ø–ª–∞—Ç—É. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ–±—ã –Ω–∞ —á–µ–∫–µ –±—ã–ª–æ –∏–º—è –∏ —Å—É–º–º–∞")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
async def handle_voice(update: Update, context: ContextTypes.DEFAULT_TYPE):
    voice = await update.message.voice.get_file()
    path = f"/tmp/{update.message.from_user.id}.ogg"
    await voice.download_to_drive(path)
    try:
        from pydub import AudioSegment
        AudioSegment.from_ogg(path).export(path.replace(".ogg", ".wav"), format="wav")
        recognizer = sr.Recognizer()
        with sr.AudioFile(path.replace(".ogg", ".wav")) as source:
            audio = recognizer.record(source)
            text = recognizer.recognize_google(audio, language="ru-RU")
            update.message.text = text
            await handle_text(update, context)
    except Exception as e:
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Ä–µ—á–∏")

# –ú–æ–∏ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ –º–µ—Å—Ç–∞
async def saved_places(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    c.execute("SELECT name, address, photo_url FROM places WHERE user_id=?", (user_id,))
    rows = c.fetchall()
    if not rows:
        await update.message.reply_text("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö –º–µ—Å—Ç.")
    for name, addr, url in rows:
        await update.message.reply_text(f"üèôÔ∏è {name}\nüìç {addr}\nüîó {url}")

# –û—Å–Ω–æ–≤–Ω–æ–π –∑–∞–ø—É—Å–∫
if __name__ == '__main__':
    loop = asyncio.new_event_loop()
    asyncio.set_event_loop(loop)
    application = ApplicationBuilder().token(TOKEN).build()

    application.add_handler(CommandHandler("start", start))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text))
    application.add_handler(MessageHandler(filters.PHOTO, handle_photo))
    application.add_handler(MessageHandler(filters.VOICE, handle_voice))
    application.add_handler(MessageHandler(filters.Regex("üìö –ú–æ–∏ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ –º–µ—Å—Ç–∞"), saved_places))

    Thread(target=run_flask).start()
    application.run_polling()
