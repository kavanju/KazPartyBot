import os
import logging
from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, ContextTypes, filters
from flask import Flask
from threading import Thread
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

TOKEN = os.getenv("TOKEN")
OWNER_ID = int(os.getenv("OWNER_ID", "123456789"))
KASPI_NAME = os.getenv("KASPI_NAME", "–ò–º—è Kaspi")

# –ü–∞–º—è—Ç—å –¥–æ—Å—Ç—É–ø–∞
user_access = {}
free_trial_used = set()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# Flask-—Å–µ—Ä–≤–µ—Ä –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ Render
flask_app = Flask(__name__)

@flask_app.route("/")
def home():
    return "KazPartyBot is alive!"

def run_flask():
    flask_app.run(host="0.0.0.0", port=8080)

# –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if user_id == OWNER_ID:
        user_access[user_id] = True
        await update.message.reply_text("üëë –ü—Ä–∏–≤–µ—Ç, –∞–¥–º–∏–Ω! –î–æ—Å—Ç—É–ø –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –Ω–∞–≤—Å–µ–≥–¥–∞.")
        return

    if user_access.get(user_id):
        await update.message.reply_text("‚úÖ –£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –¥–æ—Å—Ç—É–ø.")
    elif user_id not in free_trial_used:
        free_trial_used.add(user_id)
        user_access[user_id] = True
        await update.message.reply_text("üéÅ –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π –¥–æ—Å—Ç—É–ø –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω! –ù–∞–ø–∏—à–∏—Ç–µ –∑–∞–ø—Ä–æ—Å.")
    else:
        await update.message.reply_text(
            "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.\n\nüí∏ –û–ø–ª–∞—Ç–∞ –∑–∞ 48 —á–∞—Å–æ–≤:\n"
            "‚Ä¢ 400‚Ç∏ Kaspi Pay\n‚Ä¢ $2 PayPal\n\n"
            f"üìé Kaspi: https://pay.kaspi.kz/pay/sav8emzy\n"
            f"–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –ø—Ä–∏—à–ª–∏—Ç–µ —á–µ–∫ —Å—é–¥–∞ (–Ω–∞ –∏–º—è: {KASPI_NAME})."
        )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ (—á–µ–∫–∞)
async def photo_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if not update.message.photo:
        return
    await update.message.reply_text("üïµÔ∏è –ü—Ä–æ–≤–µ—Ä—è—é —á–µ–∫...")
    # –ó–¥–µ—Å—å —Ç—ã –º–æ–∂–µ—à—å –¥–æ–±–∞–≤–∏—Ç—å –ò–ò-–ø—Ä–æ–≤–µ—Ä–∫—É —á–µ–∫–∞ –ø–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é
    user_access[user_id] = True
    await update.message.reply_text("‚úÖ –î–æ—Å—Ç—É–ø –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω. –ü–∏—à–∏—Ç–µ, —á—Ç–æ –∏—â–µ–º!")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞
async def handle_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if not user_access.get(user_id) and user_id != OWNER_ID:
        await update.message.reply_text("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞. –ù–∞–∂–º–∏—Ç–µ /start")
        return
    await update.message.reply_text(f"ü§ñ –ü–æ–∏—Å–∫ –ø–æ –∑–∞–ø—Ä–æ—Å—É:\n¬´{update.message.text}¬ª...")

# –û—Å–Ω–æ–≤–Ω–æ–π –∑–∞–ø—É—Å–∫
def main():
    Thread(target=run_flask).start()

    application = ApplicationBuilder().token(TOKEN).build()

    application.add_handler(CommandHandler("start", start))
    application.add_handler(MessageHandler(filters.PHOTO, photo_handler))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text))

    application.run_polling()

if __name__ == "__main__":
    main()

