from aiogram import Bot, Dispatcher, types
from aiogram.utils import executor
import openai
import os
from dotenv import load_dotenv
from datetime import datetime, timedelta

# –ó–∞–≥—Ä—É–∑–∫–∞ .env
load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
ADMIN_ID = int(os.getenv("ADMIN_ID"))
KASPI_PAY_LINK = os.getenv("KASPI_PAY_LINK")
PAYPAL_LINK = "https://www.paypal.com/paypalme/yourlink"  # –ó–∞–º–µ–Ω–∏ –Ω–∞ —Å–≤–æ–π PayPal
KASPI_PRICE = "400‚Ç∏ –∑–∞ 48 —á–∞—Å–æ–≤"
PAYPAL_PRICE = "$2.5 for 48 hours"

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher(bot)
openai.api_key = OPENAI_API_KEY
user_access = {}

# üîç GPT-–∑–∞–ø—Ä–æ—Å: –ù–∞–π–¥–∏ –∑–∞–≤–µ–¥–µ–Ω–∏—è —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
async def find_places(prompt, lang="ru"):
    system_prompt = {
        "ru": (
            "–¢—ã –ò–ò-–≥–∏–¥ –ø–æ –∑–∞–≤–µ–¥–µ–Ω–∏—è–º. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ–ø–∏—Å–∞–ª, –∫—É–¥–∞ —Ö–æ—á–µ—Ç —Å—Ö–æ–¥–∏—Ç—å.\n"
            "–ü—Ä–µ–¥–ª–æ–∂–∏ 3 –∑–∞–≤–µ–¥–µ–Ω–∏—è, –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —É–∫–∞–∂–∏:\n"
            "- üìç –ù–∞–∑–≤–∞–Ω–∏–µ\n"
            "- üì∏ –ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∏ –∞—Ç–º–æ—Å—Ñ–µ—Ä—É (–º—É–∑—ã–∫–∞, –∞—É–¥–∏—Ç–æ—Ä–∏—è)\n"
            "- üíµ –°—Ä–µ–¥–Ω–∏–π —á–µ–∫ (–µ–¥–∞ –∏ –Ω–∞–ø–∏—Ç–∫–∏)\n"
            "- üó∫Ô∏è –ê–¥—Ä–µ—Å –∏–ª–∏ –ø—Ä–∏–º–µ—Ä–Ω–æ–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ\n"
            "- üåê –ü—Ä–∏–º–µ—Ä —Ñ–æ—Ç–æ (–ø—Ä–µ–¥–ª–æ–∂–∏ —Å—Å—ã–ª–∫—É –∏–ª–∏ –æ–ø–∏—à–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ)"
        ),
        "en": (
            "You are an AI assistant for finding venues. The user described what kind of place they want to visit.\n"
            "Suggest 3 venues, and for each include:\n"
            "- üìç Name\n"
            "- üì∏ Short description and atmosphere (music, crowd)\n"
            "- üíµ Average check (food and drinks)\n"
            "- üó∫Ô∏è Address or approximate location\n"
            "- üåê Example photo link or image description"
        )
    }

    try:
        response = openai.ChatCompletion.create(
            model="gpt-4",
            messages=[
                {"role": "system", "content": system_prompt[lang]},
                {"role": "user", "content": prompt}
            ]
        )
        return response["choices"][0]["message"]["content"]
    except Exception as e:
        return f"‚ùå –û—à–∏–±–∫–∞ OpenAI: {e}"

# üîò /start
@dp.message_handler(commands=["start"])
async def cmd_start(message: types.Message):
    await message.answer(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø ‚Äî KazPartyBot.\n"
        "–Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ –Ω–∞–π—Ç–∏ –ª—É—á—à–∏–µ –±–∞—Ä—ã, –∫–∞—Ñ–µ, –∫–ª—É–±—ã –∏ —Ä–µ—Å—Ç–æ—Ä–∞–Ω—ã –ø–æ —Ç–≤–æ–∏–º –∫—Ä–∏—Ç–µ—Ä–∏—è–º üç∏üçîüï∫\n\n"
        f"üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å:\n‚Ä¢ {KASPI_PRICE}\n‚Ä¢ {PAYPAL_PRICE}\n\n"
        f"üîó Kaspi Pay: {KASPI_PAY_LINK}\n"
        f"üåç PayPal: {PAYPAL_LINK}\n\n"
        "üì∏ –ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã ‚Äî –ø—Ä–∏—à–ª–∏ —Ñ–æ—Ç–æ –∏–ª–∏ —Å–∫—Ä–∏–Ω —á–µ–∫–∞."
    )

# üßæ –§–æ—Ç–æ –æ–ø–ª–∞—Ç—ã
@dp.message_handler(content_types=types.ContentType.PHOTO)
async def handle_payment_photo(message: types.Message):
    user_id = message.from_user.id
    user_access[user_id] = datetime.utcnow() + timedelta(hours=48)
    await message.reply("‚úÖ –û–ø–ª–∞—Ç–∞ –ø—Ä–∏–Ω—è—Ç–∞! –ú–æ–∂–µ—à—å –æ–ø–∏—Å–∞—Ç—å, –∫—É–¥–∞ —Ö–æ—á–µ—à—å —Å—Ö–æ–¥–∏—Ç—å ‚Äî —è –ø–æ–¥–±–µ—Ä—É –∑–∞–≤–µ–¥–µ–Ω–∏—è.")

# üß† –ó–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@dp.message_handler(content_types=types.ContentType.TEXT)
async def handle_request(message: types.Message):
    user_id = message.from_user.id
    now = datetime.utcnow()

    if user_id not in user_access or user_access[user_id] < now:
        await message.reply(
            "üîí –î–æ—Å—Ç—É–ø –æ–≥—Ä–∞–Ω–∏—á–µ–Ω.\n"
            f"üì∏ –û—Ç–ø—Ä–∞–≤—å —Ñ–æ—Ç–æ –æ–ø–ª–∞—Ç—ã Kaspi (400‚Ç∏): {KASPI_PAY_LINK}\n"
            f"üåç –ò–ª–∏ –æ–ø–ª–∞—Ç–∏ —á–µ—Ä–µ–∑ PayPal ($2.5): {PAYPAL_LINK}"
        )
        return

    user_text = message.text
    lang = "ru" if message.from_user.language_code == "ru" else "en"
    await message.reply("üîé –ü–æ–¥–±–∏—Ä–∞—é –∑–∞–≤–µ–¥–µ–Ω–∏—è –ø–æ —Ç–≤–æ–∏–º –∫—Ä–∏—Ç–µ—Ä–∏—è–º...")
    ai_reply = await find_places(user_text, lang=lang)
    await message.reply(ai_reply)
