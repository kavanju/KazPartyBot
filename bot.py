import logging
from aiogram import Bot, Dispatcher, types
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton
from aiogram.utils import executor
import os
import json

API_TOKEN = os.getenv("TOKEN")  # –¢–µ–ª–µ–≥—Ä–∞–º —Ç–æ–∫–µ–Ω

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)

# –§–∞–π–ª –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞–≤–µ–¥–µ–Ω–∏–π
DATA_FILE = "data/saved_places.json"
os.makedirs("data", exist_ok=True)

# –ó–∞–≥—Ä—É–∂–∞–µ–º –∑–∞–≤–µ–¥–µ–Ω–∏—è
def load_saved_places():
    if os.path.exists(DATA_FILE):
        with open(DATA_FILE, "r", encoding="utf-8") as f:
            return json.load(f)
    return {}

# –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–≤–µ–¥–µ–Ω–∏—è
def save_place(user_id, place):
    data = load_saved_places()
    data.setdefault(str(user_id), []).append(place)
    with open(DATA_FILE, "w", encoding="utf-8") as f:
        json.dump(data, f, ensure_ascii=False, indent=2)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start
@dp.message_handler(commands=["start"])
async def start_cmd(message: Message):
    keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add(KeyboardButton("üìç –ö—É–¥–∞ —Å—Ö–æ–¥–∏—Ç—å?"))
    keyboard.add(KeyboardButton("üìö –ú–æ–∏ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ –º–µ—Å—Ç–∞"))
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –Ø –ò–ò-–ø–æ–º–æ—â–Ω–∏–∫ –ø–æ –∑–∞–≤–µ–¥–µ–Ω–∏—è–º. –û–ø–∏—à–∏, –∫—É–¥–∞ —Ö–æ—á–µ—à—å —Å—Ö–æ–¥–∏—Ç—å, –∏–ª–∏ –≤—ã–±–µ—Ä–∏ –æ–ø—Ü–∏—é.", reply_markup=keyboard)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ú–æ–∏ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ –º–µ—Å—Ç–∞"
@dp.message_handler(lambda m: m.text == "üìö –ú–æ–∏ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ –º–µ—Å—Ç–∞")
async def show_saved(message: Message):
    data = load_saved_places()
    places = data.get(str(message.from_user.id), [])
    if not places:
        await message.answer("–£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö –º–µ—Å—Ç.")
    else:
        reply = "üìå –¢–≤–æ–∏ –º–µ—Å—Ç–∞:\n\n"
        for i, place in enumerate(places, 1):
            reply += f"{i}. {place.get('name', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}\n"
        await message.answer(reply)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@dp.message_handler()
async def handle_request(message: Message):
    user_input = message.text.strip()
    # –ó–¥–µ—Å—å ‚Äî –∑–∞–≥–ª—É—à–∫–∞ –ò–ò, –º–æ–∂–Ω–æ –ø–æ–¥–∫–ª—é—á–∏—Ç—å OpenAI
    example_place = {
        "name": f"–ü—Ä–∏–º–µ—Ä –∑–∞–≤–µ–¥–µ–Ω–∏—è –¥–ª—è: {user_input}",
        "description": "–£—é—Ç–Ω–æ–µ –º–µ—Å—Ç–æ —Å –º—É–∑—ã–∫–æ–π –∏ —Ç–∞–Ω—Ü–∞–º–∏",
        "price": "–°—Ä–µ–¥–Ω–∏–π —á–µ–∫: 5000‚Ç∏",
    }
    save_place(message.from_user.id, example_place)

    await message.answer(
        f"üéâ –ù–∞—à—ë–ª –º–µ—Å—Ç–æ –¥–ª—è —Ç–µ–±—è:\n\n"
        f"üè† –ù–∞–∑–≤–∞–Ω–∏–µ: {example_place['name']}\n"
        f"üìñ –û–ø–∏—Å–∞–Ω–∏–µ: {example_place['description']}\n"
        f"üí∞ {example_place['price']}"
    )

if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True)
