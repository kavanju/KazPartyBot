import os
import logging
import asyncio
import tempfile
from datetime import datetime, timedelta
from dotenv import load_dotenv
from telegram import (
    Update, InlineKeyboardButton, InlineKeyboardMarkup, KeyboardButton,
    ReplyKeyboardMarkup, InputFile, MessageEntity
)
from telegram.ext import (
    ApplicationBuilder, CommandHandler, MessageHandler,
    CallbackQueryHandler, ContextTypes, filters
)
from duckduckgo_search import DDGS
from PIL import Image
import pytesseract
import speech_recognition as sr
from pydub import AudioSegment

load_dotenv()
logging.basicConfig(level=logging.INFO)

TOKEN = os.getenv("TOKEN")
OWNER_ID = int(os.getenv("OWNER_ID"))
KASPI_NAME = os.getenv("KASPI_NAME")

user_access = {}  # user_id: datetime
used_free = set()  # –∫—Ç–æ —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –ø—Ä–æ–±–Ω—ã–π –∑–∞–ø—Ä–æ—Å

# ==== –ú–µ–Ω—é ====
main_menu = InlineKeyboardMarkup([
    [InlineKeyboardButton("üìç –ù–∞–π—Ç–∏ –º–µ—Å—Ç–æ", callback_data="find")],
    [InlineKeyboardButton("üó£ –ì–æ–ª–æ—Å–æ–≤–æ–π –≤–≤–æ–¥", callback_data="voice")],
    [InlineKeyboardButton("üí≥ –û—Ç–ø—Ä–∞–≤–∏—Ç—å —á–µ–∫ Kaspi", callback_data="pay")],
    [InlineKeyboardButton("‚ÑπÔ∏è –ò–Ω—Ñ–æ", callback_data="info")]
])

# ==== –ö–æ–º–∞–Ω–¥—ã ====
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ KazPartyBot!\n\n"
        "–Ø –ø–æ–¥–±–µ—Ä—É –∑–∞–≤–µ–¥–µ–Ω–∏—è –ø–æ —Ç–≤–æ–µ–º—É –æ–ø–∏—Å–∞–Ω–∏—é (–±–∞—Ä, –∫–ª—É–±, —Ä–µ—Å—Ç–æ—Ä–∞–Ω –∏ —Ç.–ø.).\n\n"
        "üí° –ü–µ—Ä–≤—ã–π –∑–∞–ø—Ä–æ—Å ‚Äî –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π!\n\n"
        "‚è≥ –û–ø–ª–∞—Ç–∞: 400‚Ç∏ –∑–∞ 48 —á–∞—Å–æ–≤ –¥–æ—Å—Ç—É–ø–∞.",
        reply_markup=main_menu
    )

async def button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user_id = query.from_user.id

    if query.data == "find":
        await query.message.reply_text("‚úçÔ∏è –û–ø–∏—à–∏, –∫—É–¥–∞ —Ö–æ—á–µ—à—å –ø–æ–π—Ç–∏:")
    elif query.data == "voice":
        await query.message.reply_text("üé§ –û—Ç–ø—Ä–∞–≤—å –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.")
    elif query.data == "pay":
        await query.message.reply_text("üì∑ –û—Ç–ø—Ä–∞–≤—å —Ñ–æ—Ç–æ —á–µ–∫–∞ Kaspi.")
    elif query.data == "info":
        await query.message.reply_text(
            "üí≥ –û–ø–ª–∞—Ç–∞ —á–µ—Ä–µ–∑ Kaspi: 400‚Ç∏ –∑–∞ 48 —á–∞—Å–æ–≤ –¥–æ—Å—Ç—É–ø–∞.\n"
            f"–ò–º—è –ø–æ–ª—É—á–∞—Ç–µ–ª—è: *{KASPI_NAME}*\n"
            "–°—Å—ã–ª–∫–∞ –Ω–∞ –æ–ø–ª–∞—Ç—É: https://pay.kaspi.kz/pay/sav8emzy",
            parse_mode='Markdown'
        )

# ==== –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞ ====
def has_access(user_id: int) -> bool:
    if user_id in user_access and user_access[user_id] > datetime.now():
        return True
    return False

def grant_access(user_id: int, hours=48):
    user_access[user_id] = datetime.now() + timedelta(hours=hours)

# ==== –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤ ====
async def handle_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    text = update.message.text

    if not has_access(user_id):
        if user_id in used_free:
            await update.message.reply_text("üîí –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —á–µ–∫ Kaspi –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏.")
            return
        else:
            used_free.add(user_id)
            await update.message.reply_text("‚úÖ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –ø—Ä–æ–±–Ω—ã–π –∑–∞–ø—Ä–æ—Å.")

    await update.message.reply_text("üîç –ò—â—É –∑–∞–≤–µ–¥–µ–Ω–∏—è, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...")

    results = DDGS().text(text, max_results=5)
    if not results:
        await update.message.reply_text("‚ùå –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
        return

    for res in results:
        msg = f"üèôÔ∏è *{res['title']}*\nüåê {res['href']}"
        if res.get("body"):
            msg += f"\nüìù {res['body']}"
        await update.message.reply_text(msg, parse_mode="Markdown")

# ==== –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ (Kaspi —á–µ–∫) ====
async def handle_photo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    photo = update.message.photo[-1]
    file = await photo.get_file()
    path = tempfile.mktemp(suffix=".jpg")
    await file.download_to_drive(path)

    text = pytesseract.image_to_string(Image.open(path))
    if KASPI_NAME.lower() in text.lower() and "400" in text:
        grant_access(user_id)
        await update.message.reply_text("‚úÖ –û–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞. –î–æ—Å—Ç—É–ø –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –Ω–∞ 48 —á–∞—Å–æ–≤.")
    else:
        await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –æ–ø–ª–∞—Ç—É. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ–±—ã –±—ã–ª–æ –≤–∏–¥–Ω–æ –∏–º—è –∏ —Å—É–º–º—É 400‚Ç∏.")

# ==== –û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–æ–ª–æ—Å–æ–≤—ã—Ö ====
async def handle_voice(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    if not has_access(user_id) and user_id in used_free:
        await update.message.reply_text("üîí –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —á–µ–∫ Kaspi.")
        return

    file = await update.message.voice.get_file()
    ogg_path = tempfile.mktemp(suffix=".ogg")
    wav_path = tempfile.mktemp(suffix=".wav")
    await file.download_to_drive(ogg_path)

    sound = AudioSegment.from_ogg(ogg_path)
    sound.export(wav_path, format="wav")

    recognizer = sr.Recognizer()
    with sr.AudioFile(wav_path) as source:
        audio = recognizer.record(source)
    try:
        text = recognizer.recognize_google(audio, language="ru-RU")
        await update.message.reply_text(f"üó£ –í—ã —Å–∫–∞–∑–∞–ª–∏: {text}")
        await handle_text(update, context)
    except:
        await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ä–µ—á—å.")

# ==== –û—Å–Ω–æ–≤–Ω–æ–π –∑–∞–ø—É—Å–∫ ====
if __name__ == "__main__":
    app = ApplicationBuilder().token(TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CallbackQueryHandler(button))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text))
    app.add_handler(MessageHandler(filters.PHOTO, handle_photo))
    app.add_handler(MessageHandler(filters.VOICE, handle_voice))

    print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    app.run_polling()
