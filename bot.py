import os import logging import asyncio import speech_recognition as sr from pydub import AudioSegment from telegram import Update, KeyboardButton, ReplyKeyboardMarkup from telegram.ext import ( ApplicationBuilder, CommandHandler, MessageHandler, filters, ContextTypes ) from duckduckgo_search import DDGS from dotenv import load_dotenv from PIL import Image import pytesseract import datetime

load_dotenv()

TOKEN = os.getenv("TOKEN") KASPI_NAME = os.getenv("KASPI_NAME", "–ò–º—è –ø–æ–ª—É—á–∞—Ç–µ–ª—è")

logging.basicConfig(level=logging.INFO) logger = logging.getLogger(name)

users_access = {}

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE): buttons = [[KeyboardButton("üéπ –ì–æ–ª–æ—Å–æ–≤–æ–π –≤–≤–æ–¥")]] keyboard = ReplyKeyboardMarkup(buttons, resize_keyboard=True) await update.message.reply_text( "üëã –ü—Ä–∏–≤–µ—Ç! –û–ø–∏—à–∏, –∫—É–¥–∞ —Ö–æ—á–µ—à—å –ø–æ–π—Ç–∏ (–±–∞—Ä, –∫–ª—É–±, –∫–∞—Ñ–µ –∏ —Ç.–¥.) ‚Äî —è –ø–æ–¥–±–µ—Ä—É –ª—É—á—à–∏–µ –º–µ—Å—Ç–∞!\n\n" "üì∏ –û—Ç–ø—Ä–∞–≤—å —Ñ–æ—Ç–æ —á–µ–∫–∞ Kaspi –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –ø–æ —Å—Å—ã–ª–∫–µ: https://pay.kaspi.kz/pay/sav8emzy\n\n" "üí¨ –ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –≤–≤–æ–¥–∞.", reply_markup=keyboard )

async def voice_handler(update: Update, context: ContextTypes.DEFAULT_TYPE): file = await update.message.voice.get_file() file_path = "/tmp/audio.ogg" wav_path = "/tmp/audio.wav" await file.download_to_drive(file_path)

AudioSegment.from_ogg(file_path).export(wav_path, format="wav")

recognizer = sr.Recognizer()
with sr.AudioFile(wav_path) as source:
    audio = recognizer.record(source)

try:
    text = recognizer.recognize_google(audio, language="ru-RU")
    await search_places(update, context, text)
except sr.UnknownValueError:
    await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ä–µ—á—å.")
except Exception as e:
    await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–∏.")

async def search_places(update: Update, context: ContextTypes.DEFAULT_TYPE, query: str = None): if query is None: query = update.message.text

await update.message.reply_text("üîç –ò—â—É –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –º–µ—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏ –Ω–µ–º–Ω–æ–≥–æ...")

results = []
with DDGS() as ddgs:
    for r in ddgs.text(f"{query} —Å–∞–π—Ç:2gis.kz", max_results=3):
        results.append(f"{r['title']}\n{r['href']}\n")

if results:
    await update.message.reply_text("\u0412–æ—Ç —á—Ç–æ —è –Ω–∞—à—ë–ª:\n\n" + "\n\n".join(results))
else:
    await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∑–∞–≤–µ–¥–µ–Ω–∏—è –ø–æ –æ–ø–∏—Å–∞–Ω–∏—é.")

async def photo_handler(update: Update, context: ContextTypes.DEFAULT_TYPE): user_id = update.message.from_user.id photo_file = await update.message.photo[-1].get_file() photo_path = f"/tmp/receipt_{user_id}.jpg" await photo_file.download_to_drive(photo_path)

img = Image.open(photo_path)
text = pytesseract.image_to_string(img, lang="rus")

if KASPI_NAME.lower() in text.lower():
    await update.message.reply_text(
        "‚úÖ –ß–µ–∫ –ø–æ–ª—É—á–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ 1 –º–∏–Ω—É—Ç—É, –ø–æ–∫–∞ –º—ã –ø—Ä–æ–≤–µ—Ä–∏–º –æ–ø–ª–∞—Ç—É..."
    )
    await asyncio.sleep(60)
    users_access[user_id] = datetime.datetime.now() + datetime.timedelta(hours=48)
    await update.message.reply_text("üéâ –î–æ—Å—Ç—É–ø –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –Ω–∞ 48 —á–∞—Å–æ–≤! –û–ø–∏—à–∏—Ç–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –Ω–∞–π—Ç–∏.")
else:
    await update.message.reply_text(
        "‚ùå –ß–µ–∫ –Ω–µ –ø—Ä–æ—à—ë–ª –ø—Ä–æ–≤–µ—Ä–∫—É. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –Ω–∞ –Ω—ë–º –µ—Å—Ç—å –∏–º—è –ø–æ–ª—É—á–∞—Ç–µ–ª—è: " + KASPI_NAME
    )

async def text_handler(update: Update, context: ContextTypes.DEFAULT_TYPE): user_id = update.message.from_user.id now = datetime.datetime.now() if user_id in users_access and users_access[user_id] > now: await search_places(update, context) else: await update.message.reply_text("üö´ –°–Ω–∞—á–∞–ª–∞ –æ–ø–ª–∞—Ç–∏—Ç–µ –¥–æ—Å—Ç—É–ø –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ —á–µ–∫–∞ Kaspi.")

def main(): app = ApplicationBuilder().token(TOKEN).build()

app.add_handler(CommandHandler("start", start))
app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, text_handler))
app.add_handler(MessageHandler(filters.VOICE, voice_handler))
app.add_handler(MessageHandler(filters.PHOTO, photo_handler))

app.run_polling()

if name == "main": main()

