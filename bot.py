import os
import logging
from telegram import Update, KeyboardButton, ReplyKeyboardMarkup
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, filters, ContextTypes
from keep_alive import keep_alive
from dotenv import load_dotenv
import datetime

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

TOKEN = os.getenv("TOKEN")
OWNER_ID = int(os.getenv("OWNER_ID"))
KASPI_NAME = os.getenv("KASPI_NAME")
KASPI_LINK = os.getenv("KASPI_LINK")
PAYPAL_EMAIL = os.getenv("PAYPAL_EMAIL")
PAYPAL_PRICE_USD = os.getenv("PAYPAL_PRICE_USD", "2")
ACCESS_DURATION_HOURS = int(os.getenv("ACCESS_DURATION_HOURS", "48"))

user_access = {}
free_used = set()

# –Ø–∑—ã–∫–∏
LANGS = {
    'ru': {
        'welcome': "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ –Ω–∞–π—Ç–∏, –≥–¥–µ –æ—Ç–¥–æ—Ö–Ω—É—Ç—å: –±–∞—Ä—ã, –∫–ª—É–±—ã, –∫–∞—Ä–∞–æ–∫–µ, —Ä–µ—Å—Ç–æ—Ä–∞–Ω—ã –∏ –º–Ω–æ–≥–æ–µ –¥—Ä—É–≥–æ–µ.",
        'free_used': "‚ö†Ô∏è –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π –∑–∞–ø—Ä–æ—Å —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω. –û–ø–ª–∞—Ç–∏—Ç–µ –¥–æ—Å—Ç—É–ø:",
        'choose_lang': "–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ / –¢—ñ–ª–¥—ñ —Ç–∞“£–¥–∞“£—ã–∑ / Choose language",
        'pay': "üí≥ –û–ø–ª–∞—Ç–∏—Ç–µ 400‚Ç∏ Kaspi –∏–ª–∏ $2 —á–µ—Ä–µ–∑ PayPal, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –Ω–∞ 48 —á–∞—Å–æ–≤:",
        'kaspi': "üì≤ Kaspi Pay:",
        'paypal': "üåç PayPal:",
        'access_granted': "‚úÖ –î–æ—Å—Ç—É–ø –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!",
        'send_request': "‚úçÔ∏è –û–ø–∏—à–∏, –∫—É–¥–∞ —Ö–æ—á–µ—à—å –ø–æ–π—Ç–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä: '–≥–¥–µ –ø–æ—Ç–∞–Ω—Ü–µ–≤–∞—Ç—å –≤ –ê—Å—Ç–∞–Ω–µ —Å –º—É–∑—ã–∫–æ–π 2000-—Ö')",
    },
    'kk': {
        'welcome': "üëã –°”ô–ª–µ–º! –ú–µ–Ω —Å—ñ–∑–≥–µ –±–∞—Ä—É“ì–∞ –±–æ–ª–∞—Ç—ã–Ω –æ—Ä—ã–Ω–¥–∞—Ä–¥—ã —Ç–∞–±—É“ì–∞ –∫”©–º–µ–∫—Ç–µ—Å–µ–º—ñ–Ω: –±–∞—Ä–ª–∞—Ä, –∫–ª—É–±—Ç–∞—Ä, –∫–∞—Ä–∞–æ–∫–µ, –º–µ–π—Ä–∞–º—Ö–∞–Ω–∞–ª–∞—Ä –∂”ô–Ω–µ —Ç.–±.",
        'free_used': "‚ö†Ô∏è –¢–µ–≥—ñ–Ω —Å“±—Ä–∞–Ω—ã—Å –ø–∞–π–¥–∞–ª–∞–Ω—ã–ª–¥—ã. “ö–æ–ª–∂–µ—Ç—ñ–º–¥—ñ–ª—ñ–∫—Ç—ñ —Å–∞—Ç—ã–ø –∞–ª—ã“£—ã–∑:",
        'choose_lang': "–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ / –¢—ñ–ª–¥—ñ —Ç–∞“£–¥–∞“£—ã–∑ / Choose language",
        'pay': "üí≥ 400‚Ç∏ Kaspi –Ω–µ–º–µ—Å–µ $2 PayPal –∞—Ä“õ—ã–ª—ã —Ç”©–ª–µ“£—ñ–∑ (48 —Å–∞“ì–∞—Ç“õ–∞ “õ–æ–ª–∂–µ—Ç—ñ–º–¥—ñ–ª—ñ–∫):",
        'kaspi': "üì≤ Kaspi —Ç”©–ª–µ–º—ñ:",
        'paypal': "üåç PayPal:",
        'access_granted': "‚úÖ “ö–æ–ª–∂–µ—Ç—ñ–º–¥—ñ–ª—ñ–∫ –±–µ—Ä—ñ–ª–¥—ñ!",
        'send_request': "‚úçÔ∏è “ö–∞–π–¥–∞ –±–∞—Ä“ì—ã“£—ã–∑ –∫–µ–ª–µ—Ç—ñ–Ω—ñ–Ω –∂–∞–∑—ã“£—ã–∑ (–º—ã—Å–∞–ª—ã: '–ê—Å—Ç–∞–Ω–∞–¥–∞ –±–∏ –±–∏–ª–µ–π—Ç—ñ–Ω –∂–µ—Ä')",
    },
    'en': {
        'welcome': "üëã Hi! I‚Äôll help you find places to relax: bars, clubs, karaoke, restaurants, and more.",
        'free_used': "‚ö†Ô∏è Free request used. Please pay for access:",
        'choose_lang': "–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ / –¢—ñ–ª–¥—ñ —Ç–∞“£–¥–∞“£—ã–∑ / Choose language",
        'pay': "üí≥ Pay 400‚Ç∏ via Kaspi or $2 via PayPal to get 48-hour access:",
        'kaspi': "üì≤ Kaspi Pay:",
        'paypal': "üåç PayPal:",
        'access_granted': "‚úÖ Access granted!",
        'send_request': "‚úçÔ∏è Describe where you want to go (e.g., 'Where to dance in Berlin with techno')",
    }
}

user_lang = {}

def get_lang_text(user_id, key):
    lang = user_lang.get(user_id, os.getenv("DEFAULT_LANG", "ru"))
    return LANGS.get(lang, LANGS["ru"])[key]

def check_access(user_id):
    if user_id in user_access:
        if datetime.datetime.now() < user_access[user_id]:
            return True
        else:
            del user_access[user_id]
    return False

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    keyboard = [
        [KeyboardButton("–†—É—Å—Å–∫–∏–π üá∑üá∫"), KeyboardButton("“ö–∞–∑–∞“õ—à–∞ üá∞üáø"), KeyboardButton("English üá¨üáß")]
    ]
    await update.message.reply_text(get_lang_text(user.id, "choose_lang"),
                                    reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True))

async def message_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    text = update.message.text

    # –í—ã–±–æ—Ä —è–∑—ã–∫–∞
    if text == "–†—É—Å—Å–∫–∏–π üá∑üá∫":
        user_lang[user.id] = "ru"
        await update.message.reply_text(LANGS["ru"]["welcome"] + "\n\n" + LANGS["ru"]["send_request"])
        return
    elif text == "“ö–∞–∑–∞“õ—à–∞ üá∞üáø":
        user_lang[user.id] = "kk"
        await update.message.reply_text(LANGS["kk"]["welcome"] + "\n\n" + LANGS["kk"]["send_request"])
        return
    elif text == "English üá¨üáß":
        user_lang[user.id] = "en"
        await update.message.reply_text(LANGS["en"]["welcome"] + "\n\n" + LANGS["en"]["send_request"])
        return

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞
    if check_access(user.id):
        await update.message.reply_text("ü§ñ [–ò–¥—ë—Ç –ø–æ–¥–±–æ—Ä –º–µ—Å—Ç–∞‚Ä¶ –≤ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ —Ç—É—Ç –±—É–¥–µ—Ç –ò–ò –∏ —Ñ–æ—Ç–æ, –æ—Ç–∑—ã–≤—ã, –∫–∞—Ä—Ç–∞...]")
        return

    if user.id not in free_used:
        free_used.add(user.id)
        await update.message.reply_text("üéÅ –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π –ø—Ä–æ–±–Ω—ã–π –∑–∞–ø—Ä–æ—Å –ø—Ä–∏–Ω—è—Ç! –°–ª–µ–¥—É—é—â–∏–π –±—É–¥–µ—Ç –ø–ª–∞—Ç–Ω—ã–π.")
        await update.message.reply_text("ü§ñ [–¢–µ—Å—Ç–æ–≤—ã–π –ø–æ–¥–±–æ—Ä –º–µ—Å—Ç–∞: –Ω–∞–ø—Ä–∏–º–µ—Ä '–ë–∞—Ä –≤ –ê–ª–º–∞—Ç—ã —Å –∂–∏–≤–æ–π –º—É–∑—ã–∫–æ–π']")
        return

    # –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞
    lang_msg = get_lang_text(user.id, "free_used") + "\n\n" + \
               f"{get_lang_text(user.id, 'pay')}\n\n" + \
               f"{get_lang_text(user.id, 'kaspi')} {KASPI_LINK}\nüë§ {KASPI_NAME}\n\n" + \
               f"{get_lang_text(user.id, 'paypal')} paypal.me/{PAYPAL_EMAIL} (${PAYPAL_PRICE_USD})"
    await update.message.reply_text(lang_msg)

async def access_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    if user.id == OWNER_ID and context.args:
        try:
            target_id = int(context.args[0])
            user_access[target_id] = datetime.datetime.now() + datetime.timedelta(hours=ACCESS_DURATION_HOURS)
            await update.message.reply_text(f"‚úÖ –î–æ—Å—Ç—É–ø –≤—ã–¥–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {target_id}")
        except:
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –≤—ã–¥–∞—á–∏ –¥–æ—Å—Ç—É–ø–∞.")
    else:
        await update.message.reply_text("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤.")

if __name__ == '__main__':
    keep_alive()
    logging.basicConfig(level=logging.INFO)
    app = ApplicationBuilder().token(TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("access", access_command))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, message_handler))

    app.run_polling()
