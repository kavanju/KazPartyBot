import os import logging import asyncio from telegram import Update, InputFile, KeyboardButton, ReplyKeyboardMarkup from telegram.ext import ( ApplicationBuilder, CommandHandler, MessageHandler, ContextTypes, filters ) from dotenv import load_dotenv from duckduckgo_search import DDGS from PIL import Image import requests import io import speech_recognition as sr from pydub import AudioSegment from flask import Flask from threading import Thread

load_dotenv()

TOKEN = os.getenv("TOKEN") OWNER_ID = int(os.getenv("OWNER_ID")) KASPI_NAME = os.getenv("KASPI_NAME") FREE_ATTEMPT_USERS = set() PAID_USERS = {}

logging.basicConfig(level=logging.INFO)

Flask app for Render keep-alive

app = Flask('')

@app.route('/') def home(): return "KazPartyBot is alive!"

def run(): app.run(host='0.0.0.0', port=8080)

def keep_alive(): Thread(target=run).start()

====== –ü–û–ò–°–ö –ó–ê–í–ï–î–ï–ù–ò–ô –ß–ï–†–ï–ó –ò–ò (DuckDuckGo) ======

def search_places(query): results = [] with DDGS() as ddgs: for r in ddgs.text(query + " site:2gis.kz", max_results=3): results.append({"title": r['title'], "href": r['href'], "body": r['body']}) return results

====== –†–ê–°–ü–û–ó–ù–ê–í–ê–ù–ò–ï –ì–û–õ–û–°–ê ======

async def recognize_voice(file_path): recognizer = sr.Recognizer() sound = AudioSegment.from_file(file_path) wav_path = file_path.replace(".ogg", ".wav") sound.export(wav_path, format="wav")

with sr.AudioFile(wav_path) as source:
    audio = recognizer.record(source)
    try:
        text = recognizer.recognize_google(audio, language="ru-RU")
        return text
    except sr.UnknownValueError:
        return "–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ä–µ—á—å."

====== –û–ë–†–ê–ë–û–¢–ö–ê –ö–û–ú–ê–ù–î ======

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE): await update.message.reply_text( "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –ò–ò-–ø–æ–º–æ—â–Ω–∏–∫ –ø–æ –∑–∞–≤–µ–¥–µ–Ω–∏—è–º –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω–∞. –ù–∞–ø–∏—à–∏, –∫—É–¥–∞ —Ö–æ—á–µ—à—å –ø–æ–π—Ç–∏ ‚Äî —è –ø–æ–¥–±–µ—Ä—É –ª—É—á—à–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã.\n\n" "üó£ –ú–æ–∂–µ—à—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≥–æ–ª–æ—Å–æ–≤–æ–π –≤–≤–æ–¥ –∏–ª–∏ —Ç–µ–∫—Å—Ç.\n" "üíµ –î–ª—è –Ω–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ ‚Äî –æ–ø–ª–∞—Ç–∏ 400‚Ç∏: https://pay.kaspi.kz/pay/sav8emzy\n" "–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –¥–æ—Å—Ç—É–ø –∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç—Å—è –≤ —Ç–µ—á–µ–Ω–∏–µ 1 –º–∏–Ω—É—Ç—ã.\n" )

====== –ü–†–û–í–ï–†–ö–ê –î–û–°–¢–£–ü–ê ======

def user_has_access(user_id): return user_id in PAID_USERS or user_id in FREE_ATTEMPT_USERS

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE): user_id = update.effective_user.id text = update.message.text

if not user_has_access(user_id):
    FREE_ATTEMPT_USERS.add(user_id)
    await update.message.reply_text("üîÑ –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–ø–ª–∞—Ç—ã... –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ –º–∏–Ω—É—Ç—É.")
    await asyncio.sleep(60)
    PAID_USERS[user_id] = True
    await update.message.reply_text("‚úÖ –î–æ—Å—Ç—É–ø –≤—ã–¥–∞–Ω! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π –Ω–∞ 48 —á–∞—Å–æ–≤.")

results = search_places(text)
if not results:
    await update.message.reply_text("‚ùå –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ–ø–∏—Å–∞—Ç—å –∑–∞–ø—Ä–æ—Å –∏–Ω–∞—á–µ.")
    return

for place in results:
    msg = f"üèô <b>{place['title']}</b>\n{place['body']}\nüîó <a href='{place['href']}'>–°—Å—ã–ª–∫–∞</a>"
    await update.message.reply_html(msg)

====== –û–ë–†–ê–ë–û–¢–ö–ê –ì–û–õ–û–°–ê ======

async def handle_voice(update: Update, context: ContextTypes.DEFAULT_TYPE): user = update.effective_user voice = await update.message.voice.get_file() file_path = f"voice_{user.id}.ogg" await voice.download_to_drive(file_path)

text = await recognize_voice(file_path)
update.message.text = text
await handle_message(update, context)

====== –û–°–ù–û–í–ù–û–ô –ó–ê–ü–£–°–ö ======

if name == 'main': keep_alive() app = ApplicationBuilder().token(TOKEN).build()

app.add_handler(CommandHandler("start", start))
app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
app.add_handler(MessageHandler(filters.VOICE, handle_voice))

print("Bot is running...")
app.run_polling()

