import os
import logging
from telegram import Update, KeyboardButton, ReplyKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder, CommandHandler, MessageHandler, filters, ContextTypes
)
from flask import Flask
from threading import Thread
from dotenv import load_dotenv
from duckduckgo_search import DDGS
import speech_recognition as sr
from pydub import AudioSegment
from io import BytesIO
from PIL import Image
import pytesseract

# –ó–∞–≥—Ä—É–∑–∫–∞ .env
load_dotenv()
TOKEN = os.getenv("TOKEN")
OWNER_ID = int(os.getenv("OWNER_ID", "123456789"))
KASPI_NAME = os.getenv("KASPI_NAME", "–ò–º—è Kaspi")
RENDER_EXTERNAL_URL = os.getenv("RENDER_EXTERNAL_URL")  # –î–æ–±–∞–≤—å —ç—Ç–æ –≤ .env

# –ü–∞–º—è—Ç—å –¥–æ—Å—Ç—É–ø–∞
user_access = {}
free_trial_used = set()
saved_places = {}

# –õ–æ–≥–∏
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# Flask –¥–ª—è Render
flask_app = Flask(__name__)
@flask_app.route("/")
def home():
    return "KazPartyBot is alive!"

def run_flask():
    flask_app.run(host="0.0.0.0", port=8080)

# –ö–æ–º–∞–Ω–¥—ã
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    saved_places.setdefault(user_id, [])

    if user_id == OWNER_ID:
        user_access[user_id] = True
        await update.message.reply_text("üëë –ü—Ä–∏–≤–µ—Ç, –∞–¥–º–∏–Ω! –î–æ—Å—Ç—É–ø –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –Ω–∞–≤—Å–µ–≥–¥–∞.")
        return

    if user_access.get(user_id):
        await update.message.reply_text("‚úÖ –£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –¥–æ—Å—Ç—É–ø.")
    elif user_id not in free_trial_used:
        free_trial_used.add(user_id)
        user_access[user_id] = True
        await update.message.reply_text("üéÅ –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π –¥–æ—Å—Ç—É–ø –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω! –ù–∞–ø–∏—à–∏—Ç–µ –∑–∞–ø—Ä–æ—Å.")
    else:
        await update.message.reply_text(
            "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.\n\nüí∏ –û–ø–ª–∞—Ç–∞ –∑–∞ 48 —á–∞—Å–æ–≤:\n"
            "‚Ä¢ 400‚Ç∏ Kaspi Pay\n‚Ä¢ $2 PayPal\n\n"
            "üìé Kaspi: https://pay.kaspi.kz/pay/sav8emzy\n"
            "–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –ø—Ä–∏—à–ª–∏—Ç–µ —á–µ–∫ —Å—é–¥–∞."
        )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —á–µ–∫–æ–≤ –ø–æ —Ñ–æ—Ç–æ (Kaspi)
async def photo_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    photo = update.message.photo[-1]
    photo_file = await photo.get_file()
    image_bytes = await photo_file.download_as_bytearray()
    image = Image.open(BytesIO(image_bytes))
    text = pytesseract.image_to_string(image, lang="rus")

    if KASPI_NAME.lower() in text.lower():
        user_access[user_id] = True
        await update.message.reply_text("‚úÖ –ß–µ–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω. –î–æ—Å—Ç—É–ø –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!")
    else:
        await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –∏–º—è –Ω–∞ —á–µ–∫–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

# –ì–æ–ª–æ—Å–æ–≤–æ–π –≤–≤–æ–¥
async def voice_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if not user_access.get(user_id) and user_id != OWNER_ID:
        await update.message.reply_text("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞. –ù–∞–∂–º–∏—Ç–µ /start")
        return

    voice = update.message.voice
    file = await voice.get_file()
    audio_bytes = await file.download_as_bytearray()
    audio = AudioSegment.from_ogg(BytesIO(audio_bytes))
    wav_io = BytesIO()
    audio.export(wav_io, format="wav")
    recognizer = sr.Recognizer()

    with sr.AudioFile(wav_io) as source:
        audio_data = recognizer.record(source)
        try:
            text = recognizer.recognize_google(audio_data, language="ru-RU")
            await update.message.reply_text(f"üó£Ô∏è –í—ã —Å–∫–∞–∑–∞–ª–∏: {text}")
            await search_places(update, text)
        except sr.UnknownValueError:
            await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –≥–æ–ª–æ—Å.")

# –ö–Ω–æ–ø–∫–∞ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö –º–µ—Å—Ç
async def my_places(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    places = saved_places.get(user_id, [])
    if not places:
        await update.message.reply_text("üìÇ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö –º–µ—Å—Ç.")
        return

    msg = "\n\n".join(places)
    await update.message.reply_text(f"üìö –í–∞—à–∏ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ –º–µ—Å—Ç–∞:\n\n{msg}")

# –ü–æ–∏—Å–∫ –∑–∞–≤–µ–¥–µ–Ω–∏–π —á–µ—Ä–µ–∑ DuckDuckGo
async def search_places(update: Update, query: str):
    user_id = update.effective_user.id
    await update.message.reply_text("üîç –ò—â—É –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –º–µ—Å—Ç–∞...")

    results = DDGS().text(query + " site:2gis.kz", max_results=5)
    response = ""
    for i, r in enumerate(results, start=1):
        title = r.get("title")
        href = r.get("href")
        if title and href:
            response += f"{i}. [{title}]({href})\n"
            saved_places[user_id].append(f"{title} ‚Äî {href}")

    if response:
        await update.message.reply_text(response, parse_mode="Markdown")
    else:
        await update.message.reply_text("üòï –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤
async def handle_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    text = update.message.text

    if text == "üìö –ú–æ–∏ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ –º–µ—Å—Ç–∞":
        await my_places(update, context)
        return

    if not user_access.get(user_id) and user_id != OWNER_ID:
        await update.message.reply_text("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞. –ù–∞–∂–º–∏—Ç–µ /start")
        return

    await search_places(update, text)

# –ó–∞–ø—É—Å–∫
def main():
    Thread(target=run_flask).start()
    app = ApplicationBuilder().token(TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.PHOTO, photo_handler))
    app.add_handler(MessageHandler(filters.VOICE, voice_handler))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text))

    # Webhook-—Ä–µ–∂–∏–º
    webhook_url = f"{RENDER_EXTERNAL_URL}/{TOKEN}"
    app.run_webhook(
        listen="0.0.0.0",
        port=8080,
        webhook_url=webhook_url,
    )

if __name__ == "__main__":
    main()
