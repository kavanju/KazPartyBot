import os
from dotenv import load_dotenv
load_dotenv()

import logging
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes
from flask import Flask, request
from threading import Thread

# === –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ===
TOKEN = os.getenv("TOKEN")
OWNER_ID = int(os.getenv("OWNER_ID", "123456789"))
KASPI_NAME = os.getenv("KASPI_NAME", "–ò–º—è –≤–ª–∞–¥–µ–ª—å—Ü–∞ Kaspi")

user_access = {}
free_trial_used = set()

# === –õ–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏–µ ===
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# === Flask —Å–µ—Ä–≤–µ—Ä –¥–ª—è Render (—á—Ç–æ–±—ã –±–æ—Ç –Ω–µ –∑–∞—Å—ã–ø–∞–ª) ===
flask_app = Flask('')

@flask_app.route('/')
def home():
    return "KazPartyBot is running!"

def run_flask():
    flask_app.run(host="0.0.0.0", port=8080)

Thread(target=run_flask).start()

# === –ö–æ–º–∞–Ω–¥—ã ===
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if user_id == OWNER_ID:
        user_access[user_id] = True
        await update.message.reply_text("üëë –ü—Ä–∏–≤–µ—Ç, –∞–¥–º–∏–Ω! –î–æ—Å—Ç—É–ø –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –Ω–∞–≤—Å–µ–≥–¥–∞.")
        return

    if user_access.get(user_id):
        await update.message.reply_text("‚úÖ –£ –≤–∞—Å –∞–∫—Ç–∏–≤–µ–Ω –¥–æ—Å—Ç—É–ø. –ú–æ–∂–µ—Ç–µ –ø–∏—Å–∞—Ç—å –∑–∞–ø—Ä–æ—Å.")
    elif user_id not in free_trial_used:
        free_trial_used.add(user_id)
        user_access[user_id] = True
        await update.message.reply_text("üéÅ –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π –ø—Ä–æ–±–Ω—ã–π –∑–∞–ø—Ä–æ—Å –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω! –ù–∞–ø–∏—à–∏—Ç–µ, –∫—É–¥–∞ —Ö–æ—Ç–∏—Ç–µ –ø–æ–π—Ç–∏.")
    else:
        await update.message.reply_text(
            "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.\n\nüí∏ –°—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ—Å—Ç—É–ø–∞ –Ω–∞ 48 —á–∞—Å–æ–≤:\n"
            "‚Ä¢ 400‚Ç∏ (Kaspi)\n‚Ä¢ $2 (PayPal)\n\n"
            "üìé Kaspi Pay: https://pay.kaspi.kz/pay/sav8emzy\n"
            "–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω —á–µ–∫–∞ –±–æ—Ç—É –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏."
        )

# === –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ —á–µ–∫–æ–≤ ===
async def photo_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if user_id == OWNER_ID:
        user_access[user_id] = True
        await update.message.reply_text("‚úÖ –ê–¥–º–∏–Ω ‚Äî –¥–æ—Å—Ç—É–ø –≤—Å–µ–≥–¥–∞ –µ—Å—Ç—å.")
        return

    if not update.message.photo:
        return

    await update.message.reply_text("üïµÔ∏è –ü—Ä–æ–≤–µ—Ä—è—é —á–µ–∫...")
    # –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ò–ò-—Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —á–µ–∫–∞ (Kaspi)
    # –ü–æ–∫–∞ —ç–º—É–ª—è—Ü–∏—è
    user_access[user_id] = True
    await update.message.reply_text("‚úÖ –î–æ—Å—Ç—É–ø –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –Ω–∞ 48 —á–∞—Å–æ–≤. –ü–∏—à–∏—Ç–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –Ω–∞–π—Ç–∏.")

# === –ò–ò-–ø–æ–¥–±–æ—Ä –∑–∞–≤–µ–¥–µ–Ω–∏–π (–∑–∞–≥–ª—É—à–∫–∞) ===
async def handle_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if not user_access.get(user_id) and user_id != OWNER_ID:
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞. –ù–∞–∂–º–∏—Ç–µ /start")
        return

    user_text = update.message.text
    await update.message.reply_text(f"ü§ñ –ò—â—É –∑–∞–≤–µ–¥–µ–Ω–∏—è –ø–æ –∑–∞–ø—Ä–æ—Å—É:\n¬´{user_text}¬ª...\n\n(–≠—Ç–∞ —á–∞—Å—Ç—å —Å–∫–æ—Ä–æ –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å —á–µ—Ä–µ–∑ –ò–ò!)")

# === –ì–ª–∞–≤–Ω–∞—è ===
def main():
    application = Application.builder().token(TOKEN).build()

    application.add_handler(CommandHandler("start", start))
    application.add_handler(MessageHandler(filters.PHOTO, photo_handler))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text))

    application.run_polling()

if __name__ == "__main__":
    main()

